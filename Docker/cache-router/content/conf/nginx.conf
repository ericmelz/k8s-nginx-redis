worker_processes  1;
error_log logs/error2.log;
events {
    worker_connections 1024;
}
http {
    # This upstream is for posting page requests on cache misses
    upstream request_page {
        server localhost:8087;
    }

    # This upstream is for routing initial GET requests to cache workers
    upstream backend {
        server 0.0.0.1;   # just an invalid address as a place holder

        balancer_by_lua_block {
            local balancer = require "ngx.balancer"
            local md5 = require 'md5'
            -- these are tkb-sts hosts
	    -- local hosts = {"192.168.182.22", "192.168.117.87"}
	    -- these are cache-worker-sts hosts
	    local hosts = {"192.168.168.201", "192.168.96.25"}
	    -- TODO use lua-resty-dns to get IPs
            -- local hosts = {"tkb-sts-0.dullahan.default.svc.cluster.local", "tkb-sts-1.dullahan.default.svc.cluster.local"}

            -- compute the hash of the url argument, mod the hash by the number of backend servers 
            -- pick a backend server (for now, just vary the port on 127.0.0.2) based on the mod hash
            -- in a real-world example, the backend servers would likely be nginx pods in a stateful set
            local pageUrl = tostring(ngx.var.arg_url)
	    local md5Hash = md5.sumhexa(pageUrl)
	    local hash = string.sub(md5Hash, 1, 8)
	    local hashNum = tonumber("0x" .. hash)
	    local serverNum = hashNum % #hosts
            local host = hosts[serverNum + 1]
	    local port = 80

            local ok, err = balancer.set_current_peer(host, port)
            if not ok then
                ngx.log(ngx.ERR, "failed to set the current peer: ", err)
                return ngx.exit(500)
            end
        }

        keepalive 10;  # connection pool
    }

    # This upstream is for receiving page responses and routing the response
    # To the appropriate cache worker for writing to disk on the cache worker
    upstream form_uploader_backend {
        server 0.0.0.1;   # just an invalid address as a place holder

        balancer_by_lua_block {
            local balancer = require "ngx.balancer"
            -- cache-worker-sts workers
	    local hosts = {"192.168.168.201", "192.168.96.25"}

            local args, err = ngx.req.get_post_args()
            if not args then
                ngx.log(ngx.ERR, "failed to get post args: ", err)
                return
            end

            for key, val in pairs(args) do
                if key == "pageUrl" then
                    pageUrl = val
                end
                if key == "pageContent" then
                    pageContent = val
                end
                if key == "hash" then
                    hash = val
                end
            end

            if not pageUrl then
                ngx.log(ngx.ERR, "couldn't find pageUrl in post args: ")
                return ngx.exit(500)
            end
            if not hash then
                ngx.log(ngx.ERR, "couldn't find hash in post args: ")
                return ngx.exit(500)
            end

	    local hashNum = tonumber("0x" .. hash)
	    local serverNum = hashNum % #hosts
            local host = hosts[serverNum + 1]            
	    local port = 80

            local ok, err = balancer.set_current_peer(host, port)
            if not ok then
                ngx.log(ngx.ERR, "failed to set the current peer: ", err)
                return ngx.exit(500)
            end
        }

        keepalive 10;  # connection pool
    }

    server {
        # this is the main entry point
	# hit the server with a url such has http://54.151.101.216:8080/?url=abc
        listen 127.0.0.1:8081;

        # If we get a 404, go to the @404 handler
        error_page 404 = @404;

        location / {
            # make use of the upstream named "backend" defined above:
	    proxy_intercept_errors on;
            rewrite_by_lua_block {
                -- Compute the hash of the url argument, and pass to the upstream backend
		local md5 = require 'md5'
                local pageUrl = tostring(ngx.var.arg_url)
		local md5Hash = md5.sumhexa(pageUrl)
		hash = string.sub(md5Hash, 1,8)
		-- rewrite uri so we use hash instead of url arg
                ngx.req.set_uri("/cache/" .. hash, false)
            }
            # proxy to backend, using hash-based routing
            proxy_pass http://backend;
        }

        # When we get a cache miss, we request a page from Verity
        location @404 {
	    proxy_pass http://request_page;
	}

    }

    server {
        # this is the mock backend for posting page requests
        # instead of writing to Kafka/verity, it directly short-circuits the loop and
	# proxies to the form uploader backend, which would be called when a page is received
        # from Kafka / verity
        listen 8087;
        
        location / {
            rewrite_by_lua_block {
                local pageUrl = ngx.var.arg_url
		local pageContent = "This is a generated page for testing.\n"
		pageContent = pageContent .. "pageUrl=" .. pageUrl .. "\n"
                -- how do we have this hash at all?  scoping is weird in nginx
		pageContent = pageContent .. "hash=" .. hash .. "\n"
                -- convert get into a post and proxy to page_response handler
                ngx.req.read_body()
		ngx.req.set_method(ngx.HTTP_POST)
		ngx.req.set_uri("/write_page", false)
                -- TODO SET HASH IN BODY_DATA
                ngx.req.set_body_data("pageUrl=" .. pageUrl .. "&pageContent=" .. pageContent .. "&hash=" .. hash)
	    }
	    proxy_pass http://form_uploader_backend;
        }
    }
}