worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {
    upstream backend {
        server 0.0.0.1;   # just an invalid address as a place holder

        balancer_by_lua_block {
            local balancer = require "ngx.balancer"
            local md5 = require 'md5'
            local host = "127.0.0.2"
	    local serverPorts = {8081, 8082}

            -- compute the hash of the url argument, mod the hash by the number of backend servers 
            -- pick a backend server (for now, just vary the port on 127.0.0.2) based on the mod hash
            -- in a real-world example, the backend servers would likely be nginx pods in a stateful set
            local pageUrl = tostring(ngx.var.arg_url)
	    local md5Hash = md5.sumhexa(pageUrl)
	    local hash = string.sub(md5Hash, 1, 8)
	    local hashNum = tonumber("0x" .. hash)
	    local serverNum = hashNum % #serverPorts
	    local port = serverPorts[serverNum + 1]

            local ok, err = balancer.set_current_peer(host, port)
            if not ok then
                ngx.log(ngx.ERR, "failed to set the current peer: ", err)
                return ngx.exit(500)
            end
        }

        keepalive 10;  # connection pool
    }

    server {
        # this is the main entry point
	# hit the server with a url such has http://54.151.101.216:8080/?url=abc
	# Examples of url -> file mappings:
	# http://54.151.101.216:8080/?url=a
        #   /home/ubuntu/work/cache/8082/0cc175b9
	# http://54.151.101.216:8080/?url=ab
        #   /home/ubuntu/work/cache/8082/187ef443
	# http://54.151.101.216:8080/?url=abc
        #   /home/ubuntu/work/cache/8081/90015098
        listen 8080;

        location / {
            # make use of the upstream named "backend" defined above:
            rewrite_by_lua_block {
                -- Compute the hash of the url argument, and pass to the upstream backend
		local md5 = require 'md5'
                local pageUrl = tostring(ngx.var.arg_url)
		local md5Hash = md5.sumhexa(pageUrl)
		hash = string.sub(md5Hash, 1,8)
                ngx.log(ngx.ERR, "pageUrl", pageUrl, " hash: ", hash)
		-- rewrite uri so we use hash instead of url arg
                ngx.req.set_uri("/" .. hash, false)
            }
            # proxy to backend, using hash-based routing
            proxy_pass http://backend;
        }
    }

    server {
        # backend server #1
        listen 127.0.0.2:8081;
        root /home/ubuntu/work/cache/8081/;

        location = / {
        }
    }

    server {
        # backend server #2
        listen 127.0.0.2:8082;
        root /home/ubuntu/work/cache/8082/;

        location = / {
        }
    }

    server {
        listen 8085;

        location /html {
            root /home/ubuntu/work/;

	}

        location /upload {
	    content_by_lua '
                local base_upload_path = "/home/ubuntu/work/uploads/"
                local resty_sha1 = require "resty.sha1"
                local upload = require "resty.upload"
                local cjson = require "cjson"


                local chunk_size = 4096
                local form = upload:new(chunk_size)
                local sha1 = resty_sha1:new()
                local file
            
                while true do
                    local typ, res, err = form:read()

                    if not typ then
                        ngx.say("failed to read: ", err)
                        return
                    end

                    if typ == "header" then
                        local file_name = nil
                        header = cjson.encode(res)
		        ngx.say("header: " .. header)
                        for k, v in pairs(res) do
                            ngx.say("  " .. v)
                            local file_name_match = string.match(v, "filename=(.*)")
                            -- local file_name_match = string.match("foo: 123 bar: 456", "(%a+):%s*(%d+)%s+(%a+):%s*(%d+)")
                            if file_name_match then
                                file_name = base_upload_path .. string.sub(file_name_match, 2, -2)
                            end
                        end


                        if file_name then
                            ngx.say("opening file " .. file_name)
                            file = io.open(file_name, "w+")
                            if not file then
                                ngx.say("failed to open file ", file_name)
                                return
                            end
                        end

                    elseif typ == "body" then
                        if file then
                            ngx.say("writing " .. res)
                            file:write(res)
                            sha1:update(res)
                        end

                    elseif typ == "part_end" then
                        if file then
                            file:close()
                        end
                        file = nil
                        local sha1_sum = sha1:final()
                        sha1:reset()
                        --my_save_sha1_sum(sha1_sum)
    
                    elseif typ == "eof" then
                        break

                    else
                        -- do nothing
                    end
                end
	    ';
	}

        location /upload_debug {
	    content_by_lua '
	        ngx.say("upload debugging...")
                local upload = require "resty.upload"
                local cjson = require "cjson"

                local chunk_size = 5 -- should be set to 4096 or 8192
                                     -- for real-world settings

                local form, err = upload:new(chunk_size)
                if not form then
                    ngx.log(ngx.ERR, "failed to new upload: ", err)
                    ngx.exit(500)
                end

                form:set_timeout(1000) -- 1 sec

                while true do
                    local typ, res, err = form:read()
                    if not typ then
                        ngx.say("failed to read: ", err)
                        return
                    end

                    ngx.say("read: ", cjson.encode({typ, res}))

                    if typ == "eof" then
                        break
                    end
                end

                local typ, res, err = form:read()
                ngx.say("read: ", cjson.encode({typ, res}))
	    ';
	}

    }
}
