worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {
    upstream page_response_router {
        server 0.0.0.1;   # just an invalid address as a place holder

        balancer_by_lua_block {
            local balancer = require "ngx.balancer"
            ngx.log(ngx.ERR, "in upstream page_response_router: ")
        }
    }

    upstream request_page {
        server localhost:8087;
    }

    upstream page_uploader_backend {
        server 0.0.0.1;   # just an invalid address as a place holder

        balancer_by_lua_block {
            local balancer = require "ngx.balancer"
            local md5 = require 'md5'
            --local host = "127.0.0.2"
	    --local serverPorts = {8081, 8082}
	    --local serverPorts = {8091, 8092}


            local host = "127.0.0.4"
	    local serverPorts = {8089, 8090}

            -- compute the hash of the url argument, mod the hash by the number of backend servers 
            -- pick a backend server (for now, just vary the port on 127.0.0.4) based on the mod hash
            -- in a real-world example, the backend servers would likely be nginx pods in a stateful set
	    local pageUrl = nil

            local args, err = ngx.req.get_post_args()
            if not args then
                ngx.log(ngx.ERR, "failed to get post args: ", err)
                return
            end

            for key, val in pairs(args) do
                if key == "pageUrl" then
                    pageUrl = val
                end
            end

            if not pageUrl then
                ngx.log(ngx.ERR, "failed to pageUrl!!! ")
                return
            end

         
	    local md5Hash = md5.sumhexa(pageUrl)
	    local hash = string.sub(md5Hash, 1, 8)
	    local hashNum = tonumber("0x" .. hash)
	    local serverNum = hashNum % #serverPorts
	    local port = serverPorts[serverNum + 1]

            ngx.log(ngx.ERR, "===upload balancer pageUrl=", pageUrl, ", hash=", hash, ", serverNum=", serverNum, ", port=", port)
            local uri = ngx.var.uri
            ngx.log(ngx.ERR, "===host=", host, ", uri=", uri)

            local ok, err = balancer.set_current_peer(host, port)
            if not ok then
                ngx.log(ngx.ERR, "failed to set the current peer: ", err)
                return ngx.exit(500)
            end
        }

        keepalive 10;  # connection pool
    }


    upstream backend {
        server 0.0.0.1;   # just an invalid address as a place holder

        balancer_by_lua_block {
            local balancer = require "ngx.balancer"
            local md5 = require 'md5'
            local host = "127.0.0.2"
	    local serverPorts = {8081, 8082}

            -- compute the hash of the url argument, mod the hash by the number of backend servers 
            -- pick a backend server (for now, just vary the port on 127.0.0.2) based on the mod hash
            -- in a real-world example, the backend servers would likely be nginx pods in a stateful set
            local pageUrl = tostring(ngx.var.arg_url)
	    local md5Hash = md5.sumhexa(pageUrl)
	    local hash = string.sub(md5Hash, 1, 8)
	    local hashNum = tonumber("0x" .. hash)
	    local serverNum = hashNum % #serverPorts
	    local port = serverPorts[serverNum + 1]

            local ok, err = balancer.set_current_peer(host, port)
            if not ok then
                ngx.log(ngx.ERR, "failed to set the current peer: ", err)
                return ngx.exit(500)
            end
        }

        keepalive 10;  # connection pool
    }

    upstream uploader_backend {
        server 0.0.0.1;   # just an invalid address as a place holder

        balancer_by_lua_block {
            local balancer = require "ngx.balancer"
            local md5 = require 'md5'
            local host = "127.0.0.3"
	    local serverPorts = {8081, 8082}

            -- compute the hash of the url argument, mod the hash by the number of backend servers 
            -- pick a backend server (for now, just vary the port on 127.0.0.2) based on the mod hash
            -- in a real-world example, the backend servers would likely be nginx pods in a stateful set
            local pageUrl = tostring(ngx.var.arg_url)
	    local md5Hash = md5.sumhexa(pageUrl)
	    local hash = string.sub(md5Hash, 1, 8)
	    local hashNum = tonumber("0x" .. hash)
	    local serverNum = hashNum % #serverPorts
	    local port = serverPorts[serverNum + 1]
            ngx.log(ngx.ERR, "-- hash is ", hash, ", port is ", port)

            local ok, err = balancer.set_current_peer(host, port)
            if not ok then
                ngx.log(ngx.ERR, "failed to set the current peer: ", err)
                return ngx.exit(500)
            end
        }

        keepalive 10;  # connection pool
    }

    upstream form_uploader_backend {
        server 0.0.0.1;   # just an invalid address as a place holder

        balancer_by_lua_block {
            local balancer = require "ngx.balancer"
            local host = "127.0.0.3"
	    local serverPorts = {8081, 8082}

            local args, err = ngx.req.get_post_args()
            if not args then
                ngx.log(ngx.ERR, "failed to get post args: ", err)
                return
            end

            for key, val in pairs(args) do
                if key == "pageUrl" then
                    pageUrl = val
                end
                if key == "pageContent" then
                    pageContent = val
                end
                if key == "hash" then
                    hash = val
                end
            end
            ngx.log(ngx.ERR, "**** backend pageUrl=" .. pageUrl .. ", pageContent=".. pageContent)

            if not pageUrl then
                ngx.log(ngx.ERR, "couldn't find pageUrl in post args: ")
                return ngx.exit(500)
            end
            if not hash then
                ngx.log(ngx.ERR, "couldn't find hash in post args: ")
                return ngx.exit(500)
            end

	    local hashNum = tonumber("0x" .. hash)
	    local serverNum = hashNum % #serverPorts
	    local port = serverPorts[serverNum + 1]
            ngx.log(ngx.ERR, "---- hash is ", hash, ", port is ", port)

            local ok, err = balancer.set_current_peer(host, port)
            if not ok then
                ngx.log(ngx.ERR, "failed to set the current peer: ", err)
                return ngx.exit(500)
            end
        }

        keepalive 10;  # connection pool
    }


    server {
        # this is the main entry point
	# hit the server with a url such has http://54.151.101.216:8080/?url=abc
	# Examples of url -> file mappings:
	# http://54.151.101.216:8080/?url=a
        #   /home/ubuntu/work/cache/8082/0cc175b9
	# http://54.151.101.216:8080/?url=ab
        #   /home/ubuntu/work/cache/8082/187ef443
	# http://54.151.101.216:8080/?url=abc
        #   /home/ubuntu/work/cache/8081/90015098
        listen 8080;

        error_page 404 = @404;

        location / {
            # make use of the upstream named "backend" defined above:
	    proxy_intercept_errors on;
            rewrite_by_lua_block {
                -- Compute the hash of the url argument, and pass to the upstream backend
		local md5 = require 'md5'
                local pageUrl = tostring(ngx.var.arg_url)
		local md5Hash = md5.sumhexa(pageUrl)
		hash = string.sub(md5Hash, 1,8)
                ngx.log(ngx.ERR, "pageUrl", pageUrl, " hash: ", hash)
		-- rewrite uri so we use hash instead of url arg
                ngx.req.set_uri("/" .. hash, false)
            }
            # proxy to backend, using hash-based routing
            proxy_pass http://backend;
        }

        location @404 {
            proxy_pass http://request_page;
	}
    }

    server {
        # backend server #1
        listen 127.0.0.2:8081;
        root /home/ubuntu/work/cache/8081/;

        location = / {
        }
    }

    server {
        # backend server #2
        listen 127.0.0.2:8082;
        root /home/ubuntu/work/cache/8082/;

        location = / {
        }
    }

    server {
        listen 8085;

        location /html {
            root /home/ubuntu/work/;

	}

        location /upload {
	    content_by_lua '
                local base_upload_path = "/home/ubuntu/work/uploads/"
                local resty_sha1 = require "resty.sha1"
                local upload = require "resty.upload"
                local cjson = require "cjson"


                local chunk_size = 4096
                local form = upload:new(chunk_size)
                local sha1 = resty_sha1:new()
                local file
            
                while true do
                    local typ, res, err = form:read()

                    if not typ then
                        ngx.say("failed to read: ", err)
                        return
                    end

                    if typ == "header" then
                        local file_name = nil
                        header = cjson.encode(res)
		        ngx.say("header: " .. header)
                        for k, v in pairs(res) do
                            ngx.say("  " .. v)
                            local file_name_match = string.match(v, "filename=(.*)")
                            -- local file_name_match = string.match("foo: 123 bar: 456", "(%a+):%s*(%d+)%s+(%a+):%s*(%d+)")
                            if file_name_match then
                                file_name = base_upload_path .. string.sub(file_name_match, 2, -2)
                            end
                        end


                        if file_name then
                            ngx.say("opening file " .. file_name)
                            file = io.open(file_name, "w+")
                            if not file then
                                ngx.say("failed to open file ", file_name)
                                return
                            end
                        end

                    elseif typ == "body" then
                        if file then
                            ngx.say("writing " .. res)
                            file:write(res)
                            sha1:update(res)
                        end

                    elseif typ == "part_end" then
                        if file then
                            file:close()
                        end
                        file = nil
                        local sha1_sum = sha1:final()
                        sha1:reset()
                        --my_save_sha1_sum(sha1_sum)
    
                    elseif typ == "eof" then
                        break

                    else
                        -- do nothing
                    end
                end
	    ';
	}

        location /upload_debug {
	    content_by_lua '
	        ngx.say("upload debugging...")
                local upload = require "resty.upload"
                local cjson = require "cjson"

                local chunk_size = 5 -- should be set to 4096 or 8192
                                     -- for real-world settings

                local form, err = upload:new(chunk_size)
                if not form then
                    ngx.log(ngx.ERR, "failed to new upload: ", err)
                    ngx.exit(500)
                end

                form:set_timeout(1000) -- 1 sec

                while true do
                    local typ, res, err = form:read()
                    if not typ then
                        ngx.say("failed to read: ", err)
                        return
                    end

                    ngx.say("read: ", cjson.encode({typ, res}))

                    if typ == "eof" then
                        break
                    end
                end

                local typ, res, err = form:read()
                ngx.say("read: ", cjson.encode({typ, res}))
	    ';
	}

    }

    server {
        # this is the main entry point for uploading
        listen 8086;

        location /html {
            root /home/ubuntu/work/;
	}

        location /page_request_poster {
	    # This should be called when there is a cache miss (a worker gets a 404)
	    # It will post a request to a component which will call Kafka to request a page
	    content_by_lua '
	        ngx.say("posting...")
                local body = "some kewl kontent"

                res = ngx.location.capture("/page_request_receiver", 
                    {method=ngx.HTTP_POST, body="a=1&b=2"})
--                    {method=ngx.HTTP_POST, body=body, args = { b = 3, c = "x" }})
                ngx.say("posted!!!")
            ';
	}

        location /page_request_receiver {
            # This component simulates calling Kafka to request a page.  For now,
	    # we will create some fake content, and post it to an endpoint which is responsible
	    # for saving data to disk (i.e., updating the cache)
	    lua_need_request_body on;
	    content_by_lua '
	        ngx.say("page_request_receiver...")
                ngx.log(ngx.ERR, "page_request_receiver hit!")
                ngx.log(ngx.ERR, "method is ", ngx.req.get_method())

                local args, err = ngx.req.get_post_args()
                if not args then
                    ngx.log(ngx.ERR, "failed to get post args: ", err)
                    return
                end
                for key, val in pairs(args) do
                    if type(val) == "table" then
                        ngx.log(ngx.ERR, "***", key, ": ", table.concat(val, ", "))
                    else
                        ngx.log(ngx.ERR, "***", key, ": ", val)
                    end
                end
                --ngx.req.read_body()
                --local body_data = ngx.req.get_body_data()
                --ngx.log(ngx.ERR, "body_data=", body_data)
            ';
	}

        location /upload_router {
            # make use of the upstream named "uploader_backend" defined above:
            rewrite_by_lua_block {
                -- Compute the hash of the url argument, and pass to the upstream backend
		--local md5 = require 'md5'
                --local pageUrl = tostring(ngx.var.arg_url)
		--local md5Hash = md5.sumhexa(pageUrl)
		--hash = string.sub(md5Hash, 1,8)
                --ngx.log(ngx.ERR, "pageUrl", pageUrl, " hash: ", hash)
		-- rewrite uri so we use hash instead of url arg
                --ngx.req.set_uri("/" .. hash, false)
		ngx.req.set_uri("/upload_debug", false)
            }
            # proxy to backend, using hash-based routing
            proxy_pass http://uploader_backend;
        }

        location /form_upload_router {
            # make use of the upstream named "uploader_backend" defined above:
	    lua_need_request_body on;
            rewrite_by_lua_block {
                -- Compute the hash of the url argument, and pass to the upstream backend
		local md5 = require 'md5'
                --local pageUrl = tostring(ngx.var.arg_url)
		--local md5Hash = md5.sumhexa(pageUrl)
		--hash = string.sub(md5Hash, 1,8)
                --ngx.log(ngx.ERR, "pageUrl", pageUrl, " hash: ", hash)
		-- rewrite uri so we use hash instead of url arg
                --ngx.req.set_uri("/" .. hash, false)
		--ngx.req.set_uri("/form_upload_debug", false)
		ngx.req.set_uri("/write_page", false)

                local args, err = ngx.req.get_post_args()
                if not args then
                    ngx.log(ngx.ERR, "failed to get post args: ", err)
                    return
                end

                for key, val in pairs(args) do
                    if key == "pageUrl" then
                        pageUrl = val
                    end
                    if key == "pageContent" then
                        pageContent = val
                    end
                end
                
                if not pageUrl then
                    ngx.log(ngx.ERR, "couldn't find pageUrl in post args: ")
                    return ngx.exit(500)
                end

		local md5Hash = md5.sumhexa(pageUrl)
		hash = string.sub(md5Hash, 1,8)

                ngx.log(ngx.ERR, "**** form router pageUrl=" .. pageUrl .. ", pageContent=".. pageContent)
                local body_data = ngx.req.get_body_data()
                ngx.log(ngx.ERR, "**** form router body_data=" .. body_data)
                ngx.req.set_body_data(body_data .. "&hash=" .. hash)
                local updated_body_data = ngx.req.get_body_data()
                ngx.log(ngx.ERR, "**** form router updated body_data=" .. updated_body_data)


            }
            # proxy to backend, using hash-based routing
            proxy_pass http://form_uploader_backend;
        }

    }

    server {
        listen 127.0.0.3:8081;

        location /write_page {
	    lua_need_request_body on;
	    content_by_lua_block {
	        ngx.say("8081: Your page was not found, check again later, we're writing it to disk...")
		local content_base_path = '/home/ubuntu/work/cache/8081/'

                local args, err = ngx.req.get_post_args()
                if not args then
                    ngx.log(ngx.ERR, "failed to get post args: ", err)
                    return
                end

                for key, val in pairs(args) do
                    if key == "pageUrl" then
                        pageUrl = val
                    end
                    if key == "pageContent" then
                        pageContent = val
                    end
                    if key == "hash" then
                        hash = val
                    end
                end
                ngx.say("pageUrl=" .. pageUrl .. "\nhash=".. hash .. "\npageContent=\n".. pageContent)

                filename = content_base_path .. hash
                ngx.say("filename=" .. filename)
                file = io.open(filename, "w+")
                if not file then
                    ngx.say("failed to open file ", file_name)
                    return
                end
                file:write(pageContent)
                file:close()
	    }
        }



        location /form_upload_debug {
	    lua_need_request_body on;
	    content_by_lua_block {
	        ngx.say("In form_upload_debug 8081")

                local args, err = ngx.req.get_post_args()
                if not args then
                    ngx.log(ngx.ERR, "failed to get post args: ", err)
                    return
                end

                for key, val in pairs(args) do
                    if key == "pageUrl" then
                        pageUrl = val
                    end
                    if key == "pageContent" then
                        pageContent = val
                    end
                    if key == "hash" then
                        hash = val
                    end
                end
                ngx.say("pageUrl=" .. pageUrl .. "\nhash=".. hash .. "\npageContent=\n".. pageContent)
	    }
        }


        location /upload_debug {
	    content_by_lua '
	        ngx.say("upload worker1 debugging...")
                local upload = require "resty.upload"
                local cjson = require "cjson"

                local chunk_size = 5 -- should be set to 4096 or 8192
                                     -- for real-world settings

                local form, err = upload:new(chunk_size)
                if not form then
                    ngx.log(ngx.ERR, "failed to new upload: ", err)
                    ngx.exit(500)
                end

                form:set_timeout(1000) -- 1 sec

                while true do
                    local typ, res, err = form:read()
                    if not typ then
                        ngx.say("failed to read: ", err)
                        return
                    end

                    ngx.say("read: ", cjson.encode({typ, res}))

                    if typ == "eof" then
                        break
                    end
                end

                local typ, res, err = form:read()
                ngx.say("read: ", cjson.encode({typ, res}))
	    ';
	}
    }

    server {
        listen 127.0.0.3:8082;

        location /write_page {
	    lua_need_request_body on;
	    content_by_lua_block {
	        ngx.say("8082: Your page was not found, check again later, we're writing it to disk...")
		local content_base_path = '/home/ubuntu/work/cache/8082/'

                local args, err = ngx.req.get_post_args()
                if not args then
                    ngx.log(ngx.ERR, "failed to get post args: ", err)
                    return
                end

                for key, val in pairs(args) do
                    if key == "pageUrl" then
                        pageUrl = val
                    end
                    if key == "pageContent" then
                        pageContent = val
                    end
                    if key == "hash" then
                        hash = val
                    end
                end
                ngx.say("pageUrl=" .. pageUrl .. "\nhash=".. hash .. "\npageContent=\n".. pageContent)

                filename = content_base_path .. hash
                ngx.say("filename=" .. filename)
                file = io.open(filename, "w+")
                if not file then
                    ngx.say("failed to open file ", file_name)
                    return
                end
                file:write(pageContent)
                file:close()
	    }
        }

        location /form_upload_debug {
	    lua_need_request_body on;

	    content_by_lua_block {
	        ngx.say("In form_upload_debug 8082")

                local args, err = ngx.req.get_post_args()
                if not args then
                    ngx.log(ngx.ERR, "failed to get post args: ", err)
                    return
                end

                for key, val in pairs(args) do
                    if key == "pageUrl" then
                        pageUrl = val
                    end
                    if key == "pageContent" then
                        pageContent = val
                    end
                    if key == "hash" then
                        hash = val
                    end
                end
                ngx.say("pageUrl=" .. pageUrl .. "\nhash=".. hash .. "\npageContent=\n".. pageContent)
	    }
        }

        location /upload_debug {
	    content_by_lua '
	        ngx.say("upload worker2 debugging...")
	        ngx.log(ngx.ERR, "upload worker2 debugging...")
                local upload = require "resty.upload"
                local cjson = require "cjson"

                local chunk_size = 5 -- should be set to 4096 or 8192
                                     -- for real-world settings

                local form, err = upload:new(chunk_size)
                if not form then
                    ngx.log(ngx.ERR, "failed to new upload: ", err)
                    ngx.exit(500)
                end

                form:set_timeout(1000) -- 1 sec

                while true do
                    local typ, res, err = form:read()
                    if not typ then
                        ngx.say("failed to read: ", err)
                        ngx.log(ngx.ERR, "failed to read: ", err)
                        return
                    end

                    ngx.say("read: ", cjson.encode({typ, res}))
                    ngx.log(ngx.ERR, "read: ", cjson.encode({typ, res}))

                    if typ == "eof" then
                        break
                    end
                end

                local typ, res, err = form:read()
                ngx.say("read: ", cjson.encode({typ, res}))
                ngx.log(ngx.ERR, "read: ", cjson.encode({typ, res}))
	    ';
	}
    }

    server {
        # this is the mock backend for posting page requests
        listen 8087;
        
        location / {
            rewrite_by_lua_block {
                ngx.say("yer page wasnt found\n")
                local pageUrl = ngx.var.arg_url
                ngx.say("pageUrl=" .. pageUrl)
                local md5 = require 'md5'
         	local md5Hash = md5.sumhexa(pageUrl)
	        local hash = string.sub(md5Hash, 1, 8)
                ngx.say("hash=" .. hash)
		local pageContent = "This is a generated page for testing.\n"
		pageContent = pageContent .. "pageUrl=" .. pageUrl .. "\n"
		pageContent = pageContent .. "hash=" .. hash .. "\n"
                -- convert get into a post and proxy to page_response handler
                ngx.req.read_body()
		ngx.req.set_method(ngx.HTTP_POST)
		--ngx.req.set_uri("/form_upload_debug", false)
		ngx.req.set_uri("/write_page", false)
                ngx.req.set_body_data("pageUrl=" .. pageUrl .. "&hash=" .. hash .. "&pageContent=" .. pageContent)
	    }
	    proxy_pass http://form_uploader_backend;
        }
	
        location /this_is_old {
	    # This should be called when there is a cache miss (a worker gets a 404)
	    # It will post a request to a component which will call Kafka to request a page
	    content_by_lua '
                ngx.say("Sorry, youre page isnt here, but well work on getting it")
                ngx.log(ngx.ERR, "POSTING.....")
                local body = "some kewl kontent"

                local pageUrl = ngx.var.arg_url
                res = ngx.location.capture("/page_request_receiver", 
                    {method=ngx.HTTP_POST, body="a=42&b=xyz&pageUrl=" .. pageUrl})
                ngx.log(ngx.ERR, "posted--")
            ';
	}

        location /page_request_receiver {
            # This component simulates calling Kafka to request a page.  For now,
	    # we will create some fake content, and post it to an endpoint which is responsible
	    # for saving data to disk (i.e., updating the cache)
	    lua_need_request_body on;
	    content_by_lua '
                ngx.log(ngx.ERR, "page_request_receiver hit!!!!")
                ngx.log(ngx.ERR, "method is ", ngx.req.get_method())

                local args, err = ngx.req.get_post_args()
                if not args then
                    ngx.log(ngx.ERR, "failed to get post args: ", err)
                    return
                end
                for key, val in pairs(args) do
                    if type(val) == "table" then
                        ngx.log(ngx.ERR, "***", key, ": ", table.concat(val, ", "))
                    else
                        ngx.log(ngx.ERR, "***", key, ": ", val)
                    end
                end
                --ngx.req.read_body()
                --local body_data = ngx.req.get_body_data()
                --ngx.log(ngx.ERR, "body_data=", body_data)
            ';
	}
    }

    server {
        listen 8088;

        location /html {
            root /home/ubuntu/work/;
	}

        location /page_response_upload_router {
            rewrite_by_lua_block {
                ngx.log(ngx.ERR, "page_response_upload_router hit!!!!")
                local args, err = ngx.req.get_post_args()
                if not args then
                    ngx.log(ngx.ERR, "failed to get post args: ", err)
                    return
                end

                for key, val in pairs(args) do
                    if key == "pageUrl" then
                        pageUrl = val
                    end
                    if key == "pageContent" then
                        pageContent = val
                    end
                end

                ngx.log(ngx.ERR, "***pageResponse upload router pageUrl=" .. pageUrl .. ", pageContent=" .. pageContent)

                -- Compute the hash of the url argument, and pass to the upstream backend
		local md5 = require 'md5'
		local md5Hash = md5.sumhexa(pageUrl)
		local hash = string.sub(md5Hash, 1,8)

                ngx.log(ngx.ERR, "***hash is ", hash)

		-- rewrite uri, adding hash for use in naming uploaded file
                ngx.req.set_uri("/" .. hash, false)

                local host = "127.0.0.4"
         	local serverPorts = {8089, 8090}
                local hashNum = tonumber("0x" .. hash)
	        local serverNum = hashNum % #serverPorts
	        local port = serverPorts[serverNum + 1]
                ngx.log(ngx.ERR, "*** host=", host, ", port=", port)

            }

        }

        location /page_response_receiver {
            # This component simulates receiving results from a Kafka consumer.  For now,
	    # It is responsible for parsing the args and proxying to the uploader-ish thing
	    # Or maybe this is the LB which does the uploading....
	    lua_need_request_body on;
	    rewrite_by_lua_block {
                ngx.log(ngx.ERR, "page_response_receiver hit!!!!")
                ngx.log(ngx.ERR, "method is ", ngx.req.get_method())

                local args, err = ngx.req.get_post_args()
                if not args then
                    ngx.log(ngx.ERR, "failed to get post args: ", err)
                    return
                end
                local pageUrl = nil
                local pageContents = nil
                for key, val in pairs(args) do
                    if key == "pageUrl" then
                        pageUrl = val
                    end
                    if key == "pageContent" then
                        pageContent = val
                    end

                    if type(val) == "table" then
                        ngx.log(ngx.ERR, "***", key, ": ", table.concat(val, ", "))
                    else
                        ngx.log(ngx.ERR, "***", key, ": ", val)                         
                    end
                end
                ngx.say("Got it.  PageUrl=" .. pageUrl .. "\npageContent=\n" .. pageContent)

                -- Compute the hash of the pageUrl, used for naming files in the upstream file writer
		local md5 = require 'md5'
		local md5Hash = md5.sumhexa(pageUrl)
		local hash = string.sub(md5Hash, 1,8)
                ngx.say("hash=" .. hash)

                -- compute the shard worker
                local host = "127.0.0.4"
         	local serverPorts = {8089, 8090}
                local hashNum = tonumber("0x" .. hash)
	        local serverNum = hashNum % #serverPorts
	        local port = serverPorts[serverNum + 1]
		port = 8089  -- force it for now
                ngx.say("host=", host, ", port=", port)
                local postArgs = "pageUrl=" .. pageUrl .. "&pageContent=" .. pageContent .. "&hash=" .. hash
                ngx.say("postArgs=", postArgs)
  		local upstreamUri = "http://" .. host .. ":" .. port .. "/"
		ngx.say("upstreamUri=", upstreamUri)

                ngx.log(ngx.ERR, "POSTING TO PAGE RESPONSE UPLOAD ROUTER.....")

                --res = ngx.location.capture("/page_response_upload_router",
                --  {method=ngx.HTTP_POST, body="pageUrl=" .. pageUrl .. "&pageContent=" .. pageContent})
		-- this doesnt work.  Maybe use ngx_proxy module.....
		--    https://github.com/openresty/lua-nginx-module#ngxlocationcapture
                ngx.req.set_uri("/", false)
                ngx.log(ngx.ERR, "***after set_uri.....")
            }
	    proxy_pass http://page_response_router;
	}
    }

    server {
        # backend upload server #1
        listen 127.0.0.4:8089;
        root /home/ubuntu/work/cache/8081/;

        location = / {
	    content_by_lua_block {
                 ngx.say("************yoyoyo");
                 ngx.log(ngx.ERR, "***********yoyoyo");
	    }
	}

        location = /backup {
            content_by_lua '
	        ngx.log(ngx.ERR, "IN UPLOADER WORKER 8089")

                local pageUrl = nil
		local pageContent = nil
		local hash = nil
                local args, err = ngx.req.get_post_args()
                if not args then
                    ngx.log(ngx.ERR, "failed to get post args: ", err)
                    return
                end

                for key, val in pairs(args) do
                    if key == "pageUrl" then
                        pageUrl = val
                    end
                end
                for key, val in pairs(args) do
                    if key == "pageContent" then
                        pageContent = val
                    end
                end

                if not pageUrl then
                    ngx.log(ngx.ERR, "failed to get pageUrl!!! ")
                    return
                end

                if not pageContent then
                    ngx.log(ngx.ERR, "failed to get pageContent!!! ")
                    return
                end

                ngx.log(ngx.ERR, "*** uploader pageUrl = ", pageUrl)

                ngx.log(ngx.ERR, "*** uploader pageContent = ", pageContent)

                local uri = ngx.var.uri
                ngx.log(ngx.ERR, "*** uploader uri = ", uri)
            ';
        }
    }

}
