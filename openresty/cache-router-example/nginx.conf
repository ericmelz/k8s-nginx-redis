worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {
    upstream backend {
        server 0.0.0.1;   # just an invalid address as a place holder

        balancer_by_lua_block {
            local balancer = require "ngx.balancer"
            local md5 = require 'md5'
            local host = "127.0.0.2"
	    local serverPorts = {8081, 8082}

            -- compute the hash of the url argument, mod the hash by the number of backend servers 
            -- pick a backend server (for now, just vary the port on 127.0.0.2) based on the mod hash
            -- in a real-world example, the backend servers would likely be nginx pods in a stateful set
            local pageUrl = tostring(ngx.var.arg_url)
	    local md5Hash = md5.sumhexa(pageUrl)
	    local hash = string.sub(md5Hash, 1, 8)
	    local hashNum = tonumber("0x" .. hash)
	    local serverNum = hashNum % #serverPorts
	    local port = serverPorts[serverNum + 1]

            local ok, err = balancer.set_current_peer(host, port)
            if not ok then
                ngx.log(ngx.ERR, "failed to set the current peer: ", err)
                return ngx.exit(500)
            end
        }

        keepalive 10;  # connection pool
    }

    server {
        # this is the main entry point
	# hit the server with a url such has http://54.151.101.216:8080/?url=abc
	# Examples of url -> file mappings:
	# http://54.151.101.216:8080/?url=a
        #   /usr/local/openresty/nginx/html/cache/8082/0cc175b9
	# http://54.151.101.216:8080/?url=ab
        #   /usr/local/openresty/nginx/html/cache/8082/187ef443
	# http://54.151.101.216:8080/?url=abc
        #   /usr/local/openresty/nginx/html/cache/8081/90015098
        listen 8080;

        location / {
            # make use of the upstream named "backend" defined above:
            rewrite_by_lua_block {
                -- Compute the hash of the url argument, and pass to the upstream backend
		local md5 = require 'md5'
                local pageUrl = tostring(ngx.var.arg_url)
		local md5Hash = md5.sumhexa(pageUrl)
		hash = string.sub(md5Hash, 1,8)
                ngx.log(ngx.ERR, "pageUrl", pageUrl, " hash: ", hash)
		-- rewrite uri so we use hash instead of url arg
                ngx.req.set_uri("/" .. hash, false)
            }
            # proxy to backend, using hash-based routing
            proxy_pass http://backend;
        }
    }

    server {
        # backend server #1
        listen 127.0.0.2:8081;
        root /usr/local/openresty/nginx/html/cache/8081/;

        location = / {
        }
    }

    server {
        # backend server #2
        listen 127.0.0.2:8082;
        root /usr/local/openresty/nginx/html/cache/8082/;

        location = / {
        }
    }
}
