worker_processes  1;
error_log logs/error.log;
events {
    worker_processes 1;
    worker_connections 4096;
}
http {
    server {
        listen 8080;

        location /test {
            content_by_lua_block {
                local redis = require "resty.redis"
    	        local red = redis:new()
    
                red:set_timeouts(1000, 1000, 1000)
    
                local ok, err = red:connect("13.52.98.12", 6379)
    	        if not ok then
    	            ngx.say("failed to connect: ", err)
    	            return
    	        end

                ok, err = red:set("dog", "an animal")
		if not ok then
  		    ngx.say("failed to set dog: ", err)
		    return
		end

                ngx.say("set result:", ok)

                local res, err = red:get("dog")
		if not res then
		    ngx.say("failed to get dog: ", err)
		    return
		end

                if res == ngx.null then
		    ngx.say("dog not found.")
		    return
		end

                ngx.say("dog: ", res)

                red:init_pipeline()
		red:set("cat", "Marry")
		red:set("horse", "Bob")
		red:get("cat")
		red:get("horse")
		local results, err = red:commit_pipeline()
		if not results then
		    ngx.say("failed to commit the pipelined requests: ", err)
		    return
		end

                for i, res in ipairs(results) do
		    if type(res) == "table" then
		        if res[1] == false then
			    ngx.say("failed to run command ", i, ": ", res[2])
			else
			    -- process the table value
			end
	            else
		        -- process the scalar value
		    end
		end
                res, err = red:get("cat")
		if not res then
		    ngx.say("failed to get cat: ", err)
		    return
		end

                if res == ngx.null then
		    ngx.say("cat not found.")
		    return
		end

                ngx.say("cat: ", res)
            }
	}
    }
}